CODA GLOBAL INTERNSHIP

ANGULAR SERVICES TUTORIAL
*** Intro to services ***
Services allows us to write code using functions which can be reused.
This allows code reuse and modularity.
This separates computation from components of angular.
Components shouldn't fetch or save data directly , instead the work is delegated to services.
Services are a great way to share information among classes that don't know each other. 

The command to create a new service

ng generate service <servicename>

*** Why Services? ***

Service is a broad category encompassing any value, function, or feature that an app needs. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.

Angular distinguishes components from services to increase modularity and reusability. By separating a component's view-related functionality from other kinds of processing, you can make your component classes lean and efficient.

Ideally, a component's job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a model).

A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an injectable service class, you make those tasks available to any component. You can also make your app more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.

Angular doesn't enforce these principles. Angular does help you follow these principles by making it easy to factor your application logic into services and make those services available to components through dependency injection.